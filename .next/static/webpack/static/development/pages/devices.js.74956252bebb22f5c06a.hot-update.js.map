{"version":3,"file":"static/webpack/static/development/pages/devices.js.74956252bebb22f5c06a.hot-update.js","sources":["webpack:///./components/ui/FilterModal.js"],"sourcesContent":["import React, { Component } from 'react'\nimport { Modal, Select, Row, Col, Tabs, Alert } from 'antd'\nimport dynamic from 'next/dynamic'\nimport compile from 'monquery'\n\nconst TextEditor = dynamic(import('./TextEditor'), { ssr: false })\n\nconst { TabPane } = Tabs\n\nconst mongoQueryRef =\n  'https://docs.mongodb.com/manual/reference/method/db.collection.find/#query-using-operators'\n\nclass FilterModal extends Component {\n  state = {\n    mode: this.props.defaultFormValue ? 'advanced' : 'simple',\n    // form values\n    simpleFormValues: new Map(),\n    advancedFormValue: this.props.defaultFormValue\n      ? JSON.stringify(JSON.parse(this.props.defaultFormValue), null, 2)\n      : '{\\n  \\n}',\n    // alerts\n    simpleTipsVisible: false,\n    invalidJsonAlertVisible: false,\n  }\n\n  componentDidMount = () => {\n    let simpleTipsVisible = localStorage.getItem('filtermodal.simpletips')\n    if (simpleTipsVisible === null) {\n      localStorage.setItem('filtermodal.simpletips', true)\n      simpleTipsVisible = 'true'\n    }\n    this.setState({\n      simpleTipsVisible: simpleTipsVisible === 'true' ? true : false,\n    })\n  }\n\n  handleModeChange = mode => {\n    if (mode === 'advanced') this.ace.editor.focus()\n    else if (this.stSelect) console.log(this.stSelect) //this.stSelect.focus()\n\n    this.setState({ mode })\n  }\n\n  handleOk = e => {\n    let query\n\n    if (this.state.mode === 'simple')\n      try {\n        query = this.createSimpleFilter()\n      } catch (ex) {\n        return // should NEVER happen\n      }\n    else\n      try {\n        query = this.createAdvancedFilter()\n      } catch (ex) {\n        this.setState({ invalidJsonAlertVisible: true })\n        return\n      }\n\n    this.setState({ query, invalidJsonAlertVisible: false }, () =>\n      this.props.onFilterChange(this.state.query)\n    )\n  }\n\n  createSimpleFilter = () => {\n    let fields = Array.from(this.state.simpleFormValues.entries()).map(\n      ([key, value] = e) => {\n        let qs = value.map(v => {\n          for (let op of ['!=', '>=', '<=', '>', '<']) {\n            if (v.slice(0, 2).indexOf(op) >= 0) {\n              let val = v.replace(op, '')\n              val = +val === +val ? `${Number(val)}` : `\"${val}\"`\n              return `${key} ${op} ${val}`\n            }\n          }\n          return `${key}: \"/${v}/i\"`\n        })\n        return `(${qs.join(' OR ')})`\n      }\n    )\n    return compile(fields.join(' AND '))\n  }\n\n  createAdvancedFilter = () => {\n    let query = JSON.parse(this.state.advancedFormValue)\n    // the query param does not support\n    // anything but an obj in root level\n    if (Array.isArray(query) || !(query instanceof Object)) throw SyntaxError\n  }\n\n  handleSimpleFormChange = (key, value) => {\n    this.setState(prevState => {\n      simpleFormValues: prevState.simpleFormValues.set(key, value)\n    })\n  }\n\n  handleAdvancedFormChange = advancedFormValue => {\n    this.setState({ advancedFormValue })\n  }\n  /*\n  renderFields = fields => {\n    let rows = []\n    return (\n    <Row gutter={5} style={{ margin: '0 2px' }}>\n      {Object.entries(fields).map((field, index) => (\n        <Col span={12} key={index}>\n          <label>{field[0].replace(/_/g, ' ')}</label>\n          <Select\n            ref={+index ? null : r => (this.stSelect = r)}\n            mode=\"tags\"\n            style={{ width: '100%', margin: '5px 0 10px' }}\n            placeholder={field[0].replace(/_/g, ' ')}\n            notFoundContent={false}\n            allowClear={true}\n            onChange={e => this.handleSimpleFormChange(field[1], e)}\n            autoFocus={+index ? false : true}\n            onFocus={() => console.log(field[0], 'focused')}\n            tabIndex={+index}\n          />\n        </Col>\n      ))}\n    </Row>\n  )}*/\n\n  renderFields = xs => {\n    let fields = Object.entries(xs)\n    const rows = [...Array(Math.ceil(fields.length / 2))]\n    const productRows = rows.map((row, index) =>\n      fields.slice(index * 2, index * 2 + 2)\n    )\n    const content = productRows.map((row, index) => (\n      <Row gutter={5} style={{ margin: '0 2px' }} key={index}>\n        {row.map(field => (\n          <Col span={12} key={field[0]}>\n            <label>\n              {field[0].replace(/_/g, ' ')}\n              {index}\n            </label>\n            <Select\n              ref={+index ? null : r => (this.stSelect = r)}\n              mode=\"tags\"\n              style={{ width: '100%', margin: '5px 0 10px' }}\n              placeholder={field[0].replace(/_/g, ' ')}\n              notFoundContent={false}\n              allowClear={true}\n              onChange={e => this.handleSimpleFormChange(field[1], e)}\n              autoFocus={+index ? false : true}\n              onFocus={() => console.log(field[0], 'focused')}\n              tabIndex={+index}\n            />\n          </Col>\n        ))}\n      </Row>\n    ))\n    return <div>{content}</div>\n  }\n\n  renderCodeEditor = () => (\n    <div>\n      <label>\n        {'Input here a JSON structured like the '}\n        <a href={mongoQueryRef} target=\"_blank\">\n          {'MongoDB query format'}\n        </a>\n      </label>\n      <TextEditor\n        aceref={r => (this.ace = r)}\n        mode=\"json\"\n        theme=\"monokai\"\n        value={this.state.advancedFormValue}\n        onChange={this.handleAdvancedFormChange}\n        fontSize={16}\n        height={'300px'}\n        width={'100%'}\n        style={{ margin: '15px 0 10px' }}\n        setOptions={{ showLineNumbers: false }}\n      />\n    </div>\n  )\n\n  render = () => (\n    <Modal\n      title={false}\n      visible={this.props.visible}\n      closable={false}\n      width={'80%'}\n      style={{ maxWidth: 800 }}\n      okText=\"Filter\"\n      onOk={this.handleOk}\n      onCancel={this.props.onCancel}\n      forceRender={true}\n    >\n      <Tabs\n        defaultActiveKey={this.state.mode}\n        tabPosition=\"left\"\n        onChange={this.handleModeChange}\n      >\n        <TabPane tab=\"Simple\" key=\"simple\">\n          {this.state.simpleTipsVisible && (\n            <Alert\n              closable\n              afterClose={() =>\n                this.setState({ simpleTipsVisible: false }, () =>\n                  localStorage.setItem('filtermodal.simpletips', false)\n                )\n              }\n              message={\n                'Each field is related by an AND operator, as tokens inside a field are related by an OR. You can input >, >=, <, <= and != to the beginning of each token for different comparison operation.'\n              }\n              type=\"info\"\n              showIcon\n              style={{ marginBottom: 15 }}\n            />\n          )}\n          <div\n            style={{\n              maxHeight: 500,\n              overflowX: 'hidden',\n              overflowY: 'auto',\n            }}\n          >\n            {this.renderFields(this.props.fields)}\n          </div>\n        </TabPane>\n        <TabPane tab=\"Advanced\" key=\"advanced\">\n          {this.state.invalidJsonAlertVisible && (\n            <Alert\n              message={'You must input a valid JSON object at root level.'}\n              type=\"error\"\n              showIcon\n              style={{ marginBottom: 15 }}\n            />\n          )}\n          {this.renderCodeEditor()}\n        </TabPane>\n      </Tabs>\n    </Modal>\n  )\n}\n\nexport default FilterModal\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AAEA;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AATA;AACA;AAWA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAyBA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAMA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAVA;AANA;AAFA;AAwBA;AACA;AACA;AACA;AAAA;AAIA;AAAA;AAAA;AAKA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAVA;AARA;AACA;AAsBA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AATA;AAYA;AACA;AACA;AAHA;AAKA;AAAA;AAAA;AAGA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AAKA;AAGA;AACA;AACA;AAAA;AAAA;AAZA;AAgBA;AACA;AACA;AACA;AAHA;AADA;AAUA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AA9CA;AACA;;;;;AA1KA;AACA;AAoOA;;;;A","sourceRoot":""}