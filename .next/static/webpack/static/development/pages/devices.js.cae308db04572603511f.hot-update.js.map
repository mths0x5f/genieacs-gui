{"version":3,"file":"static/webpack/static/development/pages/devices.js.cae308db04572603511f.hot-update.js","sources":["webpack:///./components/devices/ui/Params.js","webpack:///./components/devices/ui/Table.js","webpack:///./components/devices/views/show.js","webpack:///./lib/helpers.js","webpack:///./lib/util.js"],"sourcesContent":["// genieacs-gui/app/views/devices/_params.html.erb  counterpart\n\nimport React, { Component } from 'react'\nimport { Tree, Input, Row, Col, Divider, Icon, Typography } from 'antd'\nimport moment from 'moment'\n\nimport './Params.css'\nimport { groupParams } from '../../../lib/helpers'\nimport { highlightText } from '../../../lib/util'\n\nconst { TreeNode } = Tree\nconst { Text } = Typography\nconst { Search } = Input\n\nconst iconStyle = { color: 'rgba(0, 0, 0, 0.65)', marginRight: 10 }\n\nconst sorter = (a, b) => (a._path > b._path ? 1 : a._path < b._path ? -1 : 0)\n\n\n\nclass Params extends Component {\n  constructor(props) {\n    super(props)\n    this.typingTimeout = 0\n    this.state = {\n      params: props.defaultParams.sort(sorter),\n    }\n  }\n\n  componentDidMount = () => this.processParams(this.state.params, true)\n\n  processParams = (params, group, searchTerm = '') => {\n    let p\n    if (group) p = groupParams(params)\n    else p = { children: params }\n    let tree = this.treeNodes(p, searchTerm)\n    this.setState({ tree })\n  }\n\n  handleSearch = e => {\n    const search = (v, s) =>\n      v._path.search(new RegExp(s, 'i')) >= 0 ||\n      (v._value && ('' + v._value).search(new RegExp(s, 'i')) >= 0)\n\n    let searchText = e.target.value\n\n    // setTimeout is used to delay search and smooth typing\n    clearTimeout(this.typingTimeout)\n\n    this.typingTimeout = setTimeout(() => {\n      let params = this.state.params.filter(v => search(v, searchText))\n      this.processParams(params, searchText === '', searchText)\n    }, 500 / searchText.length)\n  }\n\n  treeNodes = (params, searchTerm) => {\n    let nodes = params.children.map(p => {\n      if (p.children) {\n        return (\n          <TreeNode\n            title={this.renderNode(p, searchTerm)}\n            key={p._path}\n            selectable={false}\n          >\n            {this.treeNodes(p, searchTerm)}\n          </TreeNode>\n        )\n      }\n      return (\n        <TreeNode\n          title={this.renderNode(p, searchTerm)}\n          key={p._path}\n          selectable={false}\n        />\n      )\n    })\n    return nodes\n  }\n\n  renderNode = (p, searchTerm) => {\n    return (\n      <div\n        style={{\n          whiteSpace: 'normal',\n          borderBottom: '1px solid #e8e8e8',\n          padding: 5,\n        }}\n      >\n        <Row>\n          <Col span={16}>\n            <Text className=\"long-text\" title={p._path}>\n              {p._object ? (\n                <Icon type=\"bars\" style={iconStyle} />\n              ) : p._writable ? (\n                <Icon type=\"edit\" style={iconStyle} />\n              ) : (\n                <Icon type=\"info-circle\" style={iconStyle} />\n              )}\n              {highlightText(p._path, searchTerm)}\n            </Text>\n          </Col>\n          <Col span={6} push={2}>\n            <Row gutter={2}>\n              <Col span={14}>\n                <Text type=\"secondary\" title={`Last update: ${p._timestamp}`}>\n                  <Icon\n                    type=\"clock-circle\"\n                    style={{ ...iconStyle, color: 'rgba(0, 0, 0, 0.45)' }}\n                  />\n                  {moment(p._timestamp).fromNow()}\n                </Text>\n              </Col>\n              <Col span={10} pull={2}>\n                <a>Refresh</a>\n                {p._object\n                  ? p._writable &&\n                    (p._path.match(/\\.[\\d]+$/) ? (\n                      <>\n                        <Divider type=\"vertical\" />\n                        <a>Delete</a>\n                      </>\n                    ) : (\n                      <>\n                        <Divider type=\"vertical\" />\n                        <a>Add</a>\n                      </>\n                    ))\n                  : p._writable && (\n                      <>\n                        <Divider type=\"vertical\" />\n                        <a>Edit</a>\n                      </>\n                    )}\n              </Col>\n            </Row>\n          </Col>\n        </Row>\n        <Row>\n          {!p._object && (\n            <Col span={16}>\n              <Text\n                className=\"long-text\"\n                type=\"secondary\"\n                style={{ padding: '0 24px', color: '#002f2f' }}\n              >\n                {p._value ? (\n                  highlightText('' + p._value, searchTerm)\n                ) : (\n                  <Text disabled>blank</Text>\n                )}\n              </Text>\n            </Col>\n          )}\n        </Row>\n      </div>\n    )\n  }\n\n  render = () => (\n    <>\n      <h3>Device parameters</h3>\n      <Search\n        placeholder=\"Search...\"\n        style={{ margin: '5px 0' }}\n        onChange={this.handleSearch}\n      />\n      <div\n        style={{\n          height: '500px',\n          overflowX: 'hidden',\n          overflowY: 'auto',\n          padding: 0,\n        }}\n      >\n        {this.state.tree && (\n          <Tree\n            blockNode\n            switcherIcon={<Icon type=\"down\" />}\n            defaultExpandedKeys={['InternetGatewayDevice', 'Device']}\n          >\n            {this.state.tree}\n          </Tree>\n        )}\n      </div>\n    </>\n  )\n}\n\nexport default Params\n","import React, { Component } from 'react'\nimport { Table, Typography, Divider } from 'antd'\nimport Link from 'next/link'\n\nimport './Table.css'\nimport LastInformBadge from './LastInformBadge'\nimport { queryResource } from '../../../lib/util'\nimport { paramValue } from '../../../lib/helpers'\n\nconst { Text } = Typography\n\nclass DevicesTable extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      sort: props.defaultSort\n        ? {\n            // convert the query str to obj mongo expects\n            [props.defaultSort.replace('-', '')]:\n              props.defaultSort[0] === '-' ? -1 : 1,\n          }\n        : null,\n      data: [],\n      pagination: {\n        current: props.defaultStartPage ? +props.defaultStartPage : 1,\n        pageSize: props.pageSize ? props.pageSize : 10,\n        hideOnSinglePage: true,\n        showTotal: (total, r) => `${r[0]} - ${r[1]} of ${total} items`,\n      },\n      loading: true,\n    }\n    // create columns with sort state on creation\n    this.columns = this.createColumns(props.columns)\n  }\n\n  componentDidMount = () => {\n    this.fetchData(this.props.query, this.state.pagination, this.state.sort)\n  }\n\n  componentDidUpdate = prevProps => {\n    if (this.props.query !== prevProps.query) {\n      this.setState(\n        {\n          sort: this.props.defaultSort\n            ? {\n                // convert the query str to obj mongo expects\n                [this.props.defaultSort.replace('-', '')]:\n                  this.props.defaultSort[0] === '-' ? -1 : 1,\n              }\n            : null,\n          pagination: {\n            ...this.state.pagination,\n            current: this.props.defaultStartPage\n              ? +this.props.defaultStartPage\n              : 1,\n          },\n        },\n        () =>\n          this.fetchData(\n            this.props.query,\n            this.state.pagination,\n            this.state.sort\n          )\n      )\n    }\n  }\n\n  fetchData = (query, { current, pageSize } = {}, sort) => {\n    this.setState({ loading: true })\n    queryResource('devices', {\n      query,\n      projection: ['_lastInform', ...Object.values(this.props.columns).flat()],\n      skip: current ? (current - 1) * pageSize : null,\n      limit: pageSize,\n      sort,\n    }).then(res => {\n      res.json().then(json => {\n        // successfuly returned data\n        this.setState({\n          data: this.parseDataModelFromJson(json),\n          loading: false,\n          pagination: {\n            ...this.state.pagination,\n            total: +res.headers.get('total'),\n          },\n        })\n      })\n    })\n    // TODO\n    // .catch(ex => {\n    //   console.error('error fetching data', ex)\n    // })\n  }\n\n  parseDataModelFromJson = devices => {\n    let rows = []\n    devices.forEach(device => {\n      let obj = {}\n      Object.entries(this.props.columns).forEach(column => {\n        let paths = column[1]\n        for (let path of paths) {\n          let { value } = paramValue(path, device)\n          if (value !== null) {\n            obj['' + paths] = value\n            break\n          }\n        }\n      })\n      rows.push(obj)\n    })\n    return rows\n  }\n\n  createColumns = cols => {\n    let columns = []\n    let [sortedPath, sortedDirection] = this.state.sort\n      ? Object.entries(this.state.sort)[0]\n      : ['', 1]\n\n    for (let [label, path] of Object.entries(cols)) {\n      let defaultSortOrder\n      if (sortedPath !== '' && ('' + path).indexOf(sortedPath) >= 0) {\n        // why? recent datetimes have greater values than old ones.\n        // it is kinda counter-intuitive sort \"seconds ago\" greater than \"months ago\"\n        if (sortedPath !== '_lastInform')\n          defaultSortOrder = sortedDirection === 1 ? 'ascend' : 'descend'\n        else defaultSortOrder = sortedDirection === 1 ? 'descend' : 'ascend'\n      } else defaultSortOrder = false\n\n      columns.push({\n        title: label.replace(/_/g, ' '),\n        dataIndex: '' + path,\n        key: '' + path,\n        sorter: true,\n        defaultSortOrder,\n        render:\n          '' + path === '_lastInform'\n            ? this.lastInformRender\n            : this.blankCellRender,\n      })\n    }\n\n    columns.push({\n      title: 'Action',\n      key: 'action',\n      align: 'center',\n      fixed: 'right',\n      width: 100,\n      render: this.actionCellsRender,\n    })\n\n    return columns\n  }\n\n  blankCellRender = text => (\n    <span>{text ? text : <Text disabled>blank</Text>}</span>\n  )\n\n  lastInformRender = datetime => <LastInformBadge datetime={datetime} />\n\n  actionCellsRender = (text, record) => (\n    <span>\n      {/* <Divider type=\"vertical\" /> */}\n      <Link href={`/devices/${encodeURI(record._id)}`}>\n        <a>Show</a>\n      </Link>\n    </span>\n  )\n\n  handleTableChange = (pager, filters, sorter) => {\n    const pagination = { ...this.state.pagination }\n    pagination.current = pager.current\n\n    let sort = {}\n    if (sorter.order) {\n      // why? recent datetimes have greater values than old ones.\n      // it is kinda counter-intuitive sort \"seconds ago\" greater than \"months ago\"\n      if (sorter.field !== '_lastInform')\n        sort[`${sorter.field}`] = sorter.order === 'ascend' ? 1 : -1\n      else sort[`${sorter.field}`] = sorter.order === 'ascend' ? -1 : 1\n    }\n\n    this.setState({ pagination, sort })\n    this.fetchData(this.props.query, pagination, sort)\n\n    this.props.onTableChange && this.props.onTableChange(pager.current, sort)\n  }\n\n  render = () => (\n    <div>\n      <Table\n        {...this.props}\n        size=\"middle\"\n        columns={this.columns}\n        loading={this.state.loading}\n        dataSource={this.state.data}\n        rowKey=\"_id\"\n        pagination={this.state.pagination}\n        onChange={this.handleTableChange}\n        scroll={{ x: true }}\n      />\n    </div>\n  )\n}\n\nexport default DevicesTable\n","import React, { Component } from 'react'\nimport { Spin } from 'antd'\n\nimport Params from '../ui/Params'\n\nimport { queryResource } from '../../../lib/util'\nimport { flattenParams, paramValue } from '../../../lib/helpers'\n\nclass Show extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      header: {},\n      params: { ...props.router.query },\n      device: {},\n    }\n  }\n\n  componentDidMount = () => {\n    this.fetchDevice(this.state.params.id)\n  }\n\n  fetchDevice = _id => {\n    queryResource('devices', { query: { _id } }).then(res => {\n      res.json().then(json => {\n        if (json.length !== 1) throw Error\n        // successfuly returned data\n        this.setState({\n          device: json[0],\n          deviceParams: flattenParams(json[0]),\n        })\n      })\n    })\n  }\n\n  render = () => (\n    <>\n      {this.state.deviceParams ? (\n        <Params defaultParams={this.state.deviceParams} />\n      ) : (\n        <div style={{ textAlign: 'center', padding: '200px 0' }}>\n          <Spin size=\"large\" />\n        </div>\n      )}\n    </>\n  )\n}\n\nexport default Show\n","import { escapeHtml } from './util'\n\n// brainless js port of the original\nconst getParam = (path, device) => {\n  let ref = device\n  let nodes = path.split('.')\n  let pp = []\n\n  for (let node of nodes) {\n    pp.push(node)\n    let p = pp.join('.')\n    if (p in ref) {\n      ref = ref[p]\n      pp = []\n    }\n  }\n\n  if (pp.length !== 0) return null\n  return ref\n}\n\n// a bit different return value from original but it's all\nconst paramValue = (path, device) => {\n  let classes = ['long-text', 'param-value']\n\n  let param = getParam(path, device)\n  if (param === null) return { value: null, timestamp: null, classes: null }\n\n  let val, timestamp\n  if (typeof param === 'object') {\n    val = '_orig' in param ? param['_orig'] : param['_value']\n    if ('_timestamp' in param) timestamp = param['_timestamp']\n    if (param['_writable']) classes.push('value-writable')\n  } else val = param\n\n  let valHtml = escapeHtml(val ? val.toString() : '')\n  let barePath = path.replace(/\\.\\d+\\./, '..')\n\n  /* this piece of code calls custom formatters for some parameters\n  if Rails.configuration.parameter_renderers.has_key?(bare_path)\n    begin\n      valHtml = ParameterRenderers::send(Rails.configuration.parameter_renderers[bare_path], val)\n    rescue => e\n      logger.error(\"Exception in renderer '#{Rails.configuration.parameter_renderers[path]}' for value '#{val}': #{e}\")\n    end\n  end\n  */\n\n  return { value: valHtml, timestamp, classes }\n}\n\n// 1:1 port of the original\nconst flattenParams = (params, prefix = '') => {\n  let output = []\n  for (let [n, v] of Object.entries(params)) {\n    if (n.startsWith('_') || typeof v === 'string') continue\n    v['_path'] = `${prefix}${n}`\n    output.push(v)\n\n    if (!('_value' in v)) {\n      output.push(...flattenParams(v, prefix ? `${prefix}${n}.` : `${n}.`))\n    }\n  }\n  return output\n}\n\n// make a compact tree structure from a flattened param list\nconst groupParams = ps => {\n  let root = { children: [] }\n  let nodes = { '': root }\n  ps.forEach(p => {\n    // filter only meta from ps\n    const meta = Object.keys(p)\n      .filter(k => k[0] === '_')\n      .reduce((o, k) => {\n        o[k] = p[k]\n        return o\n      }, {})\n    // link the nodes\n    const parent = p._path.substring(0, p._path.lastIndexOf('.'))\n    nodes[p._path] = { ...(p._object && { children: [] }), ...meta }\n    nodes[parent].children.push(nodes[p._path])\n  })\n  return root\n}\n\nconst devices = { getParam, paramValue, flattenParams, groupParams }\n\nexport { devices, getParam, paramValue, flattenParams, groupParams }\n","const fetch = require('isomorphic-unfetch')\n\nconst escapeHtml = unsafe => {\n  return unsafe\n    .replace(/&/g, '&amp;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;')\n    .replace(/\"/g, '&quot;')\n    .replace(/'/g, '&#039;')\n}\n\n\nconst setQueryStringParameter = (name, value) => {\n  let params = new URLSearchParams(location.search)\n  let state = { ...window.history.state }\n  params.set(name, value)\n  let to = decodeURIComponent(`${location.pathname}?${params}`)\n  state['url'] = to\n  state['as'] = to\n  window.history.pushState(state, '', to)\n}\n\nconst toQuery = o =>\n  Object.keys(o)\n    .map(k => `${k}=${o[k]}`)\n    .join('&')\n\nconst queryResource = async (\n  resource,\n  { query, projection, skip, limit, sort } = {}\n) => {\n  let args = {\n    ...(query && { query: encodeURI(JSON.stringify(query)) }),\n    ...(projection && { projection: projection.join(',') }),\n    ...(skip && { skip }),\n    ...(limit && { limit }),\n    ...(sort && { sort: JSON.stringify(sort) }),\n  }\n\n  return fetch(`/api/${resource}?${toQuery(args)}`)\n}\n\nmodule.exports = { escapeHtml, setQueryStringParameter, toQuery, queryResource }\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAGA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAQA;AAAA;AACA;AATA;AAUA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAjBA;AAmBA;AAAA;AAAA;AACA;AAGA;AACA;AAEA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAjCA;AAmCA;AACA;AACA;AAEA;AACA;AACA;AAHA;AAQA;AACA;AAAA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AAzDA;AA2DA;AAEA;AACA;AACA;AACA;AAHA;AADA;AAQA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAEA;AAAA;AAAA;AAEA;AAAA;AAAA;AAKA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAFA;AAOA;AAAA;AAAA;AAMA;AAAA;AAKA;AAAA;AAMA;AAAA;AAUA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAHA;AAQA;AAAA;AAQA;AACA;AAxIA;AAyIA;AAIA;AACA;AAAA;AAAA;AACA;AAHA;AAMA;AACA;AACA;AACA;AACA;AAJA;AADA;AAUA;AACA;AAAA;AAAA;AACA;AAHA;AAjBA;AACA;AAxIA;AACA;AACA;AADA;AAHA;AAMA;AACA;;AARA;AACA;AAuKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5LA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAwBA;AACA;AACA;AA1BA;AA4BA;AACA;AAEA;AAOA;AAEA;AAFA;AARA;AAeA;AAAA;AAOA;AACA;AACA;AAtDA;AAuDA;AAAA;AAAA;AACA;AADA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AAEA;AAFA;AAHA;AAQA;AACA;AAEA;AACA;AACA;AACA;AACA;AAjFA;AAmFA;AACA;AACA;AACA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAEA;AAAA;AACA;AADA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AAAA;AACA;AACA;AACA;AACA;AApGA;AAsGA;AACA;AAFA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AAKA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AACA;AA7IA;AA8IA;AACA;AAAA;AADA;AACA;AA/IA;AAkJA;AAAA;AAAA;AAAA;AACA;AAnJA;AAoJA;AAGA;AAAA;AAHA;AACA;AArJA;AA8JA;AACA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AA/KA;AAgLA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AATA;AAFA;AACA;AA/KA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAMA;AACA;AAhBA;AAkBA;AApBA;AAqBA;AACA;;AAvBA;AACA;AAiMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7MA;AACA;AAEA;AAEA;AACA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAUA;AACA;AACA;AAZA;AAcA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAzBA;AA0BA;AAGA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AANA;AACA;AAzBA;AACA;AACA;AACA;AAHA;AAFA;AAOA;AACA;;AATA;AACA;AAuCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChDA;AACA;AAEA;AACA;AACA;AACA;AAHA;AAAA;AAAA;AACA;AADA;AAKA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;AAUA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAFA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtFA;AACA;AACA;AACA;AAMA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAFA;AACA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AATA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAcA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;A","sourceRoot":""}