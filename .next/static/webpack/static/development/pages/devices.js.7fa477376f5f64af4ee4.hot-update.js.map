{"version":3,"file":"static/webpack/static/development/pages/devices.js.7fa477376f5f64af4ee4.hot-update.js","sources":["webpack:///./components/devices/Table.js"],"sourcesContent":["import React, { Component } from 'react'\nimport { Table, Typography, Divider, Button, Select } from 'antd'\nimport Link from 'next/link'\n\nimport { setQueryStringParameter, queryResource } from '../../lib/util'\nimport { paramValue } from '../../lib/helpers'\n\nconst { Text } = Typography\nconst { Option } = Select\n\nclass DevicesTable extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      query: props.query ? props.query : {},\n      sort: props.sort\n        ? { [props.sort.replace('-', '')]: props.sort[0] === '-' ? -1 : 1 }\n        : null,\n      data: [],\n      pagination: {\n        current: props.startPage ? +props.startPage : 1,\n        pageSize: 10,\n        hideOnSinglePage: true,\n        showTotal: this.showTotal,\n      },\n      loading: true,\n    }\n  }\n\n  reset = () => {\n    console.debug('resetting table state')\n    this.setState({\n      pagination: { ...this.state.pagination, current: 1 },\n      sort: null,\n    })\n  }\n\n  componentDidMount = () => {\n    window.addEventListener('popstate', this.handlePopState)\n    this.fetchData(this.state.query, this.state.pagination, this.state.sort)\n  }\n\n  componentDidUpdate = prevProps => {\n    // Typical usage (don't forget to compare props):\n    if (this.props.query !== prevProps.query) {\n      this.setState({ query: this.props.query }, () =>\n        this.fetchData(this.state.query, this.state.pagination, this.state.sort)\n      )\n    }\n  }\n\n  showTotal = (total, range) => `${range[0]} - ${range[1]} of ${total} items`\n\n  columns = (o, sort) => {\n    let columns = []\n    let sorted = sort ? Object.entries(sort)[0] : ['', 1]\n    for (let i of Object.entries(o)) {\n      let sortOrder\n      if (sorted[0] === '' + i[1])\n        sortOrder = sorted[1] === 1 ? 'ascend' : 'descend'\n      else sortOrder = false\n\n      columns.push({\n        title: i[0].replace('_', ' '),\n        dataIndex: i[1],\n        key: i[1],\n        sorter: true,\n        sortOrder,\n        render: text => (\n          <span>{text ? text : <Text disabled>blank</Text>}</span>\n        ),\n      })\n    }\n    columns.push({\n      title: 'Action',\n      key: 'action',\n      fixed: 'right',\n      width: 150,\n      render: (text, record) => (\n        <span>\n          {/* <Divider type=\"vertical\" /> */}\n          <Link href={`/devices/${record._id}`}>\n            <a>Show</a>\n          </Link>\n        </span>\n      ),\n    })\n    return columns\n  }\n\n  parseData = (columns, devices) => {\n    let rows = []\n    devices.forEach(device => {\n      let obj = {}\n      Object.entries(columns).forEach(column => {\n        let paths = column[1]\n        for (let path of paths) {\n          let { value } = paramValue(path, device)\n          if (value !== null) {\n            obj[path] = value\n            break\n          }\n        }\n      })\n      rows.push(obj)\n    })\n    return rows\n  }\n\n  fetchData = (query, { current, pageSize } = {}, sort) => {\n    this.setState({ loading: true })\n    queryResource('devices', {\n      query,\n      projection: [\n        '_lastInform',\n        '_deviceId',\n        'InternetGatewayDevice.DeviceInfo',\n        // ...Object.values(cols)\n      ],\n      skip: current ? (current - 1) * pageSize : null,\n      limit: pageSize,\n      sort,\n    }).then(res => {\n      res.json().then(json => {\n        this.setState({\n          data: this.parseData(this.props.columns, json),\n          loading: false,\n          pagination: {\n            ...this.state.pagination,\n            total: +res.headers.get('total'),\n          },\n        })\n      })\n    })\n  }\n\n  handlePopState = e => location.pathname === '/devices' && location.reload()\n\n  handleTableChange = (pagination, filters, sorter) => {\n    const pager = { ...this.state.pagination }\n    pager.current = pagination.current\n    setQueryStringParameter('page', pager.current)\n\n    let sort = {}\n    if (sorter.order) {\n      sort[`${sorter.field[0]}`] = sorter.order === 'ascend' ? 1 : -1\n      setQueryStringParameter(\n        'sort',\n        sorter.order === 'ascend' ? sorter.field[0] : '-' + sorter.field[0]\n      )\n    }\n\n    this.setState({ pagination: pager, sort })\n    this.fetchData(this.state.query, pager, sort)\n  }\n\n  render = () => {\n    return (\n      <div>\n        <Table\n          {...this.props}\n          size=\"middle\"\n          columns={this.columns(this.props.columns, this.state.sort)}\n          loading={this.state.loading}\n          dataSource={this.state.data}\n          rowKey=\"_id\"\n          pagination={this.state.pagination}\n          onChange={this.handleTableChange}\n          scroll={{ x: 1300 }}\n        />\n      </div>\n    )\n  }\n}\n\nexport default DevicesTable\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAmBA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAFA;AAIA;AACA;AAzBA;AA2BA;AACA;AAAA;AACA;AACA;AA9BA;AAgCA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAvCA;AAwCA;AAAA;AACA;AAzCA;AA2CA;AACA;AACA;AAHA;AACA;AAEA;AAAA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AADA;AANA;AAUA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AAHA;AALA;AAcA;AACA;AACA;AA9EA;AAgFA;AACA;AACA;AACA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAEA;AAAA;AACA;AADA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AAAA;AACA;AACA;AACA;AACA;AAjGA;AAkGA;AAAA;AAAA;AACA;AADA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAMA;AACA;AACA;AAVA;AAYA;AACA;AACA;AACA;AACA;AAEA;AAFA;AAHA;AAQA;AACA;AACA;AACA;AA5HA;AA6HA;AAAA;AACA;AA9HA;AAgIA;AACA;AAAA;AACA;AAEA;AACA;AAAA;AACA;AACA;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAhJA;AAkJA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AATA;AAaA;AACA;AAhKA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAZA;AAFA;AAgBA;AACA;;AAlBA;AACA;AAoKA;;;;A","sourceRoot":""}